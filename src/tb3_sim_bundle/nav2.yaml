# TurtleBot3 + SLAM (narrow passage friendly) / ROS 2 Humble
# -------------------------------------------------------------------
# 이 설정은 '좁은 통로/미로'에서 벽 간섭을 줄이고, 급커브 대신
# 짧은 룩어헤드 기반의 부드러운 주행과 안전 여유(인플레이션 반径↑)를 목표로 함.
# 주의) 인플레이션 반径 >= (로봇 반径 + footprint_padding) 권장
#      너무 촘촘한 해상도(resolution=0.01)는 CPU 사용량↑

controller_server:
  ros__parameters:
    use_sim_time: true                  # Gazebo/시뮬레이션 시간 사용
    controller_frequency: 20.0          # 제어루프 주기(Hz). 너무 높으면 CPU↑, 낮으면 반응↓
    controller_plugins:
      - FollowPath

    # 진행(정체) 판단기: 로봇이 목표로 '진짜' 이동 중인지 확인
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.10    # 이 반경 이상 움직이지 않으면 정체로 판단
      movement_time_allowance: 3.0      # 위 반경만큼 움직여야 하는 시간 한도(초)

    # 목표 도달 판정기: 목표 부근에서 언제 "도착"으로 볼지
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.02           # 위치 허용 오차(2cm). 좁은 통로 정밀 정지용(엄격)
      yaw_goal_tolerance: 0.35          # 각도 허용 오차(rad ≈ 20°). 회전 실패로 인한 진동 방지(완화)
      stateful: true                    # 도달 판정 상태 유지(경로 재계획 시 불필요한 실패 방지)

    # 로컬 추종 컨트롤러: Regulated Pure Pursuit (RPP)
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      transform_tolerance: 0.2          # TF 지연 허용(초)
      desired_linear_vel: 0.18          # 평상시 선속도. 좁은 복도 안전 주행을 위해 낮춤
      min_approach_linear_velocity: 0.0 # 목표 근처에서 완전 정지 허용(밀착 주기 방지)
      lookahead_dist: 0.20              # 기본 룩어헤드(20cm). 좁은 곳에서 과도한 곡선 추종 방지
      min_lookahead_dist: 0.12          # 최소 룩어헤드(12cm)
      max_lookahead_dist: 0.26          # 최대 룩어헤드(26cm) — 급커브 억제
      use_velocity_scaled_lookahead_dist: false  # 속도에 따라 룩어헤드 가변 사용 안 함(응답성 예측 가능)
      allow_reversing: true             # 필요 시 후진 허용(막다른 골목 등 회피)
      allow_rotate_in_place: true       # 제자리 회전 허용(협소 구간에서 유용)

planner_server:
  ros__parameters:
    use_sim_time: true
    planner_plugins:
      - GridBased
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"   # NavFn (Dijkstra/A*) 기반 전역 경로계획
      use_astar: true              # A* 사용(직관적 경로, 휴리스틱 가속)
      tolerance: 0.10              # 목표점 주변 허용 반경(플래너가 살짝 옆지점도 OK)
      allow_unknown: true          # 미탐색 지대 통과 경로도 계획 허용(탐사에 필요)

smoother_server:
  ros__parameters:
    use_sim_time: true
    smoother_plugins:
      - simple_smoother
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother" # 궤적 매끈하게(노이즈 감소)
      tolerance: 1.0e-10
      max_its: 1000
      w_data: 0.2                  # 원래 경로 보존 가중치
      w_smooth: 0.3                # 매끄러움 가중치(과하면 곡률 커져 벽쪽으로 들러붙을 수 있음)

behavior_server:
  ros__parameters:
    use_sim_time: true
    behavior_plugins:
      - spin
      - backup
      - drive_on_heading
      - wait
    # 회복 행동들
    spin:
      plugin: "nav2_behaviors/Spin"             # 제자리 회전 탐색/회복
    backup:
      plugin: "nav2_behaviors/BackUp"           # 후진 회복
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"   # 특정 헤딩으로 직진
    wait:
      plugin: "nav2_behaviors/Wait"             # 대기(복구용)

bt_navigator:
  ros__parameters:
    use_sim_time: true
    # 배포 환경에서 절대경로 사용(패키지 설치 위치와 일치 확인 필수)
    default_nav_to_pose_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_to_pose_w_replanning_and_recovery.xml"
    default_nav_through_poses_bt_xml: "/opt/ros/humble/share/nav2_bt_navigator/behavior_trees/navigate_through_poses_w_replanning_and_recovery.xml"

waypoint_follower:
  ros__parameters:
    use_sim_time: true
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      waypoint_pause_duration: 1     # 정수형이어야 함(Humble에서 double 주면 타입 에러 남)

velocity_smoother:
  ros__parameters:
    use_sim_time: true
    smoothing_frequency: 20.0        # cmd_vel 스무딩 주기
    scale_velocities: true           # 동적 스케일링 허용
    odom_topic: /odom
    odom_duration: 0.1
    max_velocity: [0.18, 0.0, 0.80]  # [vx, vy(미사용), wz] 최대값 — wz 낮춰 회전 급발진 억제
    max_accel:    [1.0,  0.0, 2.0]   # 최대 가속 — 회전 가속은 넉넉, 선속은 보수적
    max_decel:    [-1.0,  0.0, -2.0] # 최대 감속(음수). 절댓값이 클수록 급정지/급회전 감속

# ===== Global Costmap =====
global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: true
      global_frame: map
      robot_base_frame: base_footprint
      resolution: 0.01               # 1cm/pix(아주 촘촘). 계획 품질↑, CPU↑
      track_unknown_space: true
      always_send_full_costmap: true
      robot_radius: 0.11             # TB3 본체 반径(대략). footprint 없으면 원형 발자국으로 사용
      footprint_padding: 0.04        # 계획 시 안전 여유. inscribed ≈ 0.11 + 0.04 = 0.15m
      plugins:
        - static_layer
        - inflation_layer
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        enabled: true
        subscribe_to_updates: true
        map_subscribe_transient_local: true
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.15       # 전역 인플레이션 반径(계획 안전 여유)
                                     # ⚠ inscribed(≈0.15) 이상으로 유지해야 충돌 경로 방지
        cost_scaling_factor: 8.0     # 장애물 근처 비용 기울기(큼→급격히 상승, 경계 더 타이트)

# ===== Local Costmap =====
local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: true
      global_frame: odom
      robot_base_frame: base_footprint
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.01               # 로컬도 1cm/pix — 협소 공간에서 충돌 판정 정밀
      robot_radius: 0.11
      footprint_padding: 0.01        # 로컬 충돌 여유(전역보다 작게 설정: 붙어서 지나가도 OK)
                                     # 너무 작으면 실제 충돌 가능 → 좁은 복도만 아니면 0.02~0.03 권장
      plugins:
        - obstacle_layer
        - inflation_layer
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: scan
        scan:
          topic: /scan
          data_type: "LaserScan"
          max_obstacle_height: 0.30  # 2D 라이다 가정 — 30cm 이상은 무시
          obstacle_range: 3.0        # 장애물 마킹 최대 거리
          raytrace_range: 3.5        # 레이 트레이스로 클리어(가시선) 최대 거리
          clearing: true
          marking: true
          inf_is_valid: false        # inf 값 무시(Gazebo 센서 설정에 따라 선택)
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        enabled: true
        inflation_radius: 0.15       # 로컬 인플레이션 — 전역과 동일(안전 마진 일관성)
        cost_scaling_factor: 2.5     # 로컬은 완만한 기울기(부드럽게 가장자리 추종)

lifecycle_manager:
  ros__parameters:
    use_sim_time: true
    autostart: true                   # launch 시 자동 bringup
    node_names:
      - controller_server
      - planner_server
      - smoother_server
      - behavior_server
      - bt_navigator
      - waypoint_follower
      - velocity_smoother
